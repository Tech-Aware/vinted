from __future__ import annotations

"""
Copyright 2025 Kevin Andreazza
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy at http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

"""Listing templates and prompts for the Vinted assistant."""

from dataclasses import dataclass
from textwrap import dedent
from typing import Dict, List, Optional, Tuple

from app.backend.defect_catalog import get_defect_descriptions
from app.backend.listing_fields import ListingFields
from app.backend.sizing import NormalizedSizes, normalize_sizes
from app.backend.text_normalization import normalize_fit_terms


def _ensure_percent(value: Optional[str]) -> str:
    if not value:
        return "0%"
    stripped = value.strip()
    if stripped.endswith("%"):
        return stripped
    return f"{stripped}%"


def _clean(value: Optional[str], fallback: str = "NC") -> str:
    text = (value or "").strip()
    return text if text else fallback


@dataclass
class ListingTemplate:
    name: str
    description: str
    prompt: str

    def render(self, fields: ListingFields) -> Tuple[str, str]:
        fit_title, fit_description, fit_hashtag = normalize_fit_terms(fields.fit_leg)
        normalized_sizes: NormalizedSizes = normalize_sizes(fields.us_w, fields.fr_size, fields.has_elastane)

        fr_display = normalized_sizes.fr_size or (fields.fr_size or "")
        us_display = normalized_sizes.us_size
        size_note = normalized_sizes.note

        model = _clean(fields.model, "Levi's")
        gender = _clean(fields.gender, "femme")
        color = _clean(fields.color_main, "bleu")
        rise = _clean(fields.rise_class, "moyenne")
        cotton = _ensure_percent(fields.cotton_pct)
        polyester_pct = fields.polyester_pct
        elastane_pct = fields.elastane_pct
        composition_parts = [f"{cotton} coton"]
        if fields.has_polyester:
            composition_parts.append(f"{_ensure_percent(polyester_pct)} polyester")
        if fields.has_elastane:
            composition_parts.append(f"{_ensure_percent(elastane_pct)} √©lasthanne")
        composition = ", ".join(composition_parts)
        defect_texts = get_defect_descriptions(fields.defect_tags)
        raw_defects = (fields.defects or "").strip()

        positive_state_aliases = {
            "tr√®s bon √©tat",
            "tr√®s bon √©tat g√©n√©ral",
        }
        positive_state_aliases_casefold = {alias.casefold() for alias in positive_state_aliases}
        if raw_defects.casefold() in positive_state_aliases_casefold:
            raw_defects = ""

        if defect_texts:
            defects = "; ".join(defect_texts)
        else:
            defects = raw_defects if raw_defects else ""
        sku = _clean(fields.sku, "SKU")
        fit_title_text = fit_title or _clean(fields.fit_leg)
        fit_description_text = fit_description or _clean(fields.fit_leg)
        fit_hashtag_text = fit_hashtag or _clean(fields.fit_leg).lower().replace(" ", "")

        title_parts = [
            f"Jean Levi‚Äôs {model}",
            f"FR{fr_display}" if fr_display else "",
            f"W{us_display}" if us_display else "",
            f"L{fields.us_l}" if fields.us_l else "",
            "coupe",
            fit_title_text,
            f"{cotton} coton",
            gender,
            color,
            "-",
            sku,
        ]
        title = " ".join(part for part in title_parts if part).replace("  ", " ").strip()

        if us_display:
            size_sentence = f"Taille {us_display} US (√©quivalent {fr_display} FR), coupe {fit_description_text} √† taille {rise}, pour une silhouette ajust√©e et confortable."
        elif fr_display:
            size_sentence = f"Taille {fr_display} FR, coupe {fit_description_text} √† taille {rise}, pour une silhouette ajust√©e et confortable."
        else:
            size_sentence = f"Coupe {fit_description_text} √† taille {rise}, pour une silhouette ajust√©e et confortable."

        first_paragraph_lines = [
            f"Jean Levi‚Äôs mod√®le {model} pour {gender}.",
            size_sentence,
        ]
        if size_note:
            first_paragraph_lines.append(size_note)

        second_paragraph_lines = [
            f"Coloris {color} l√©g√®rement d√©lav√©, tr√®s polyvalent et facile √† assortir.",
            f"Composition : {composition} pour une touche de stretch et plus de confort.",
            "Fermeture zipp√©e + bouton grav√© Levi‚Äôs.",
        ]

        third_paragraph_lines: List[str] = []
        if defects:
            third_paragraph_lines.append(f"Tr√®s bon √©tat {defects} (voir photos)")
        else:
            third_paragraph_lines.append("Tr√®s bon √©tat")

        if not fields.size_label_visible and not fields.fabric_label_visible:
            third_paragraph_lines.append(
                "√âtiquettes composition/taille coup√©es pour plus de confort."
            )
        elif not fields.size_label_visible:
            third_paragraph_lines.append(
                "√âtiquette taille coup√©e pour plus de confort."
            )
        elif not fields.fabric_label_visible:
            third_paragraph_lines.append(
                "√âtiquette composition coup√©e pour plus de confort."
            )

        third_paragraph_lines.extend(
            [
                "üìè Mesures pr√©cises visibles en photo.",
                "üì¶ Envoi rapide et soign√©",
            ]
        )

        fourth_paragraph_lines = [
            f"‚ú® Retrouvez tous mes articles Levi‚Äôs √† votre taille ici üëâ #durin31fr{fr_display or 'nc'}",
            "üí° Pensez √† faire un lot pour profiter d‚Äôune r√©duction suppl√©mentaire et √©conomiser des frais d‚Äôenvoi !",
        ]

        hashtags_paragraph_lines = [
            "#levis #jeanlevis "
            f"#levis{gender.lower()} #{fit_hashtag_text}jean #jeandenim #{rise} #jean{color.lower().replace(' ', '')} #vintedfr "
            f"#durin31fr{fr_display or 'nc'}",
        ]

        description = "\n\n".join(
            [
                "\n".join(first_paragraph_lines),
                "\n".join(second_paragraph_lines),
                "\n".join(third_paragraph_lines),
                "\n".join(fourth_paragraph_lines),
                "\n".join(hashtags_paragraph_lines),
            ]
        ).strip()

        return title, description


class ListingTemplateRegistry:
    """Registry holding available listing templates."""

    def __init__(self) -> None:
        self._templates: Dict[str, ListingTemplate] = {
            "template-jean-levis-femme": ListingTemplate(
                name="template-jean-levis-femme",
                description="Template Levi's femme",
                prompt=dedent(
                    """
                    Prend en consid√©ration cette l√©gende : 
                    - Taille FR = taille fran√ßaise en cm, au format FR{{fr_size}}
                    - Mod√®le = code num√©rique du jean (ex: 501). Ajoute uniquement le mot "Premium" si et seulement si indiqu√© sur l'√©tiquette.
                    - Wn Ln = valeurs d‚Äô√©tiquette, {{w}} et {{l}}
                    - Coupe = {{fit_leg}} (ins√®re la hauteur de taille {{rise_class}} dans la description uniquement, jamais dans le titre)
                    - Mati√®re = {{cotton_pct}}% coton (+ {{polyester_pct}}% polyester si pr√©sent, + {{elastane_pct}}% √©lasthanne si pr√©sent)
                    - Genre = {{gender}}  (valeurs attendues : femme, homme, mix)
                    - T√¢ches et d√©fauts = Ce qui doit imp√©rativement appara√Ætre dans l'annonce si identifi√© sur photos ou fournit en commentaire {{defects}}
                    - SKU = {{sku}} (utilise JLF + num√©ro (1 √† 3 chiffres) si jean femme, JLH + num√©ro si jean homme ;
                      reprends exactement le num√©ro pr√©sent sur l‚Äô√©tiquette blanche visible sur le jean)

                    Utilise ce format :
                    TITRE
                    Jean Levi‚Äôs {{model}} FR{{fr_size}} W{{w}} L{{l}} coupe {{fit_leg}} {{cotton_pct}}% coton {{gender}} {{color_main}} - {{sku}}
                    
                    DESCRIPTION + HASHTAG
                    Jean Levi‚Äôs mod√®le {{model}} pour {{gender}}.
                    Taille {{w}} US (√©quivalent {{fr_size}} FR), coupe {{fit_leg}} √† taille {{rise_class}}, pour une silhouette ajust√©e et confortable.
                    Coloris {{color_main}} l√©g√®rement d√©lav√©, tr√®s polyvalent et facile √† assortir.
                    Composition : {{cotton_pct}}% coton{{#if polyester_pct}}, {{polyester_pct}}% polyester{{/if}}{{#if elastane_pct}}, {{elastane_pct}}% √©lasthanne{{/if}} pour une touche de stretch et plus de confort.
                    Fermeture zipp√©e + bouton grav√© Levi‚Äôs.
                    
                    Tr√®s bon √©tat g√©n√©ral {{defects}} (voir photos). S'il n'y a aucun d√©faut √† signaler, √©cris simplement ¬´ Tr√®s bon √©tat ¬ª.
                    üìè Mesures pr√©cises visibles en photo.
                    üì¶ Envoi rapide et soign√©
                    
                    ‚ú® Retrouvez tous mes articles Levi‚Äôs √† votre taille ici üëâ #durin31fr{{fr_size}}
                    üí° Pensez √† faire un lot pour profiter d‚Äôune r√©duction suppl√©mentaire et √©conomiser des frais d‚Äôenvoi !
                    
                    #levis #jeanlevis #levis{{gender}} #{{fit_leg}}jean #jeandenim #{{rise_class}} #jean{{color_main}} #vintedfr #durin31fr{{fr_size}}

                    Remplis les champs entre accolades en analysant les photos et en utilisant les commentaires.
                    """
                ).strip(),
            )
        }
        self.default_template = "template-jean-levis-femme"

    @property
    def available_templates(self) -> List[str]:
        return list(self._templates)

    def get_prompt(self, name: str) -> str:
        if name not in self._templates:
            raise KeyError(f"Template inconnu: {name}")
        return self._templates[name].prompt

    def get_template(self, name: str) -> ListingTemplate:
        if name not in self._templates:
            raise KeyError(f"Template inconnu: {name}")
        return self._templates[name]
